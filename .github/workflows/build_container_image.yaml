name: test

on:
  workflow_dispatch:

jobs:
  arm-build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2

    - name: apt-update
      run: sudo apt update
    - name: install package
      run: sudo apt install build-essential cmake libuv1-dev libssl-dev libhwloc-dev -y
    - name: make build directory
      run: mkdir build
    - name: make Dockerfile
      working-directory: build
      run: |
        cat > Dockerfile <<EOF
        FROM ubuntu:20.04
        WORKDIR /app
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Asia/Seoul
        RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
        RUN apt update && apt install openssl hwloc -y
        COPY . .
        EOF
    - name: cmake
      run: cmake ..
      working-directory: build
    - name: make
      run: make -j$(nproc)
      working-directory: build
    - name: add excutable option
      run: chmod +x xmrig
      working-directory: build
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v1.6.0
    - name: Docker Login
      uses: docker/login-action@v1.10.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Image
      working-directory: build
      run: docker buildx build --platform linux/arm64 -t inerplat/xmrig:arm64 --push .
  amd-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: apt-update
      run: sudo apt update
    - name: install package
      run: sudo apt install build-essential cmake libuv1-dev libssl-dev libhwloc-dev -y
    - name: make build directory
      run: mkdir build
    - name: make Dockerfile
      working-directory: build
      run: |
        cat > Dockerfile <<EOF
        FROM ubuntu:20.04
        WORKDIR /app
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Asia/Seoul
        RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
        RUN apt update && apt install openssl hwloc -y
        COPY . .
        EOF
    - name: cmake
      run: cmake ..
      working-directory: build
    - name: make
      run: make -j$(nproc)
      working-directory: build
    - name: add excutable option
      run: chmod +x xmrig
      working-directory: build
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v1.6.0
    - name: Docker Login
      uses: docker/login-action@v1.10.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Build Image
      working-directory: build
      run: docker buildx build --platform linux/amd64 -t inerplat/xmrig:amd64 --push .
  create-manifest:
    needs: [arm-build, amd-build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v1.6.0
    - name: Docker Login
      uses: docker/login-action@v1.10.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Docker pull
      run: |
        docker pull inerplat/xmrig:arm64
        docker pull inerplat/xmrig:amd64
    - name: create manifest
      run: docker manifest create inerplat/xmrig:test --amend inerplat/xmrig:amd64 --amend inerplat/xmrig:arm64
    - name: docker push
      run: docker manifest push inerplat/xmrig:test
